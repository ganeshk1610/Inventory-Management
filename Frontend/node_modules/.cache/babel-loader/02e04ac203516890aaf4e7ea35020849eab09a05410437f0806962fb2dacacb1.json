{"ast":null,"code":"import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport clamp from '@mui/utils/clamp';\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return clamp(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (!['rgb', 'rgba', 'hsl', 'hsla', 'color'].includes(type)) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\\n` + 'The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().' : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (!['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].includes(colorSpace)) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\\n` + 'The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.' : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes('hsl') && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.includes('rgb')) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.includes('hsl')) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.includes('color')) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.startsWith('#')) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.includes('rgb') || color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.includes('rgb')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nexport function blend(background, overlay, opacity) {\n  let gamma = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}","map":{"version":3,"names":["_formatMuiErrorMessage","clamp","clampWrapper","value","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","hexToRgb","color","slice","re","RegExp","colors","match","map","n","index","parseInt","Math","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","includes","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","private_safeColorChannel","warning","warn","recomposeColor","i","rgbToHex","startsWith","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","private_safeAlpha","darken","coefficient","private_safeDarken","lighten","private_safeLighten","emphasize","private_safeEmphasize","blend","overlay","opacity","gamma","blendChannel","b","o","backgroundColor","overlayColor"],"sources":["C:/Users/FEROZ RAHIL/Desktop/Inventory-Management/node_modules/@mui/system/esm/colorManipulator/colorManipulator.js"],"sourcesContent":["import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport clamp from '@mui/utils/clamp';\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return clamp(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (!['rgb', 'rgba', 'hsl', 'hsla', 'color'].includes(type)) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\\n` + 'The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().' : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (!['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].includes(colorSpace)) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\\n` + 'The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.' : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes('hsl') && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.includes('rgb')) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.includes('hsl')) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.includes('color')) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.startsWith('#')) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.includes('rgb') || color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.includes('rgb')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nexport function blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}